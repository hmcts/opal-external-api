plugins {
  id 'application'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.4.3'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.0.1.5171'
  id 'uk.gov.hmcts.java' version '0.12.65'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  main {
    java {
      srcDirs += 'src-gen/main/java/wsdl-xsd'
    }
  }
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly

  wsdl2java
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}
def coverageExclusions = [
  '**/uk/gov/hmcts/reform/opal/CPPSoapGateway/**',
  '**/uk/gov/hmcts/reform/opal/config/**',
  '**/uk/gov/hmcts/reform/opal/exception/**',
  '**/uk/gov/hmcts/reform/opal/util/**'
]

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    html.required = true
    csv.required = false
    html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
  }
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: jacocoExclusionArray(coverageExclusions)
      )
    }))
  }
}

static String[] jacocoExclusionArray(ArrayList<String> exclusions) {
  final def lst = new ArrayList<String>()

  exclusions.stream().forEach { it.endsWith(".java") ? lst.add(it.replace(".java", ".class")) : lst.add(it) }

  return lst.toArray()
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "HMCTS :: opal-external-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:opal-external-api"
    property "sonar.exclusions", coverageExclusions.join(', ')
    property 'sonar.coverage.exclusions', "**/entity/*,**/model/*,**/exception/*,**/config/**,**/repository/jpa/*,**/opal/dto/*"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection ->
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io'
    }
  maven { url "https://build.shibboleth.net/maven/releases/" }
}

ext {
  log4JVersion = "2.24.3"
  logbackVersion = "1.5.14"
}

ext['snakeyaml.version'] = '2.0'

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.5'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.8'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
  implementation group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion

  implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
  implementation 'jakarta.xml.ws:jakarta.xml.ws-api:4.0.2'
  wsdl2java 'com.sun.xml.bind:jaxb-ri:4.0.5'
  wsdl2java 'com.sun.xml.bind:jaxb-xjc:4.0.5'
  wsdl2java 'com.sun.xml.bind:jaxb-core:4.0.5'
  wsdl2java 'com.sun.xml.bind:jaxb-impl:4.0.5'
  wsdl2java 'org.apache.cxf:cxf-tools-wsdlto-core:4.1.0'
  wsdl2java 'org.apache.cxf:cxf-tools-wsdlto-frontend-jaxws:4.1.0'
  wsdl2java 'org.apache.cxf:cxf-tools-wsdlto-databinding-jaxb:4.1.0'
  implementation 'org.apache.cxf:cxf-rt-frontend-jaxws:4.1.1'
  implementation 'org.apache.cxf:cxf-rt-transports-http:4.1.1'
  implementation 'org.apache.cxf:cxf-rt-transports-http-hc:4.1.1'
  implementation 'org.apache.cxf:cxf-rt-ws-security:4.1.1'
  implementation 'org.apache.cxf:cxf-rt-features-logging:4.1.1'
  implementation 'org.opensaml:opensaml-saml-impl:5.1.3'
  implementation 'org.opensaml:opensaml-xacml-impl:5.1.3'
  implementation 'org.opensaml:opensaml-xacml-saml-impl:5.1.3'

  compileOnly 'org.projectlombok:lombok:1.18.36'
  annotationProcessor 'org.projectlombok:lombok:1.18.36'
  testCompileOnly 'org.projectlombok:lombok:1.18.36'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'

  implementation 'org.apache.groovy:groovy:4.0.26'
  implementation group: 'io.rest-assured', name: 'rest-assured'

  testImplementation(platform('org.junit:junit-bom:5.12.0'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
}

mainClassName = 'uk.gov.hmcts.reform.opal.Application'

bootJar {
  archiveFileName = "opal-external-api.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

def allWsdl = task allWsdl {
  String[] wsdls = ["CPPSoapGateway"];

  wsdls.each {name->
    def thing = task "myWsdl${name}" (type: JavaExec) {
      // Defining these mean the task can run incrementally
      inputs.files("${projectDir}/src/main/resources/schema")
      outputs.dir("${projectDir}/src-gen/main/java/wsdl-xsd")

      String wsdl = "${projectDir}/src/main/resources/schema/${name}.wsdl"
      String genSrcDir = "${projectDir}/src-gen/main/java/wsdl-xsd"
      String bindingFile = "${projectDir}/src/main/resources/schema/jaxb-bindings.xml"

      inputs.file wsdl
      outputs.dir genSrcDir

      classpath configurations.wsdl2java
      main "org.apache.cxf.tools.wsdlto.WSDLToJava"

      args '-client', '-impl', '-exsh', 'true', '-noAddressBinding', '-autoNameResolution', "-wsdlLocation", "classpath:schema/${name}.wsdl", '-p', "uk.gov.hmcts.reform.opal.${name}", '-encoding', 'UTF-8', '-d', genSrcDir, '-b', bindingFile, wsdl

      final OutputStream baos = new ByteArrayOutputStream()
      errorOutput = new OutputStream() {
        void write(int b) {System.err.write(b); baos.write(b) }
        void flush() { System.err.flush(); baos.flush() }
        void close() { System.err.close(); baos.close() }
      }

      doLast {
        def str = baos.toString()
        if (str.contains('Usage : wsdl2java') || str.contains('WSDLToJava Error')) {
          throw new TaskExecutionException(tasks[name],
            new IOException('Apache CXF WSDLToJava has failed. Please see System.err output.'))
        }
      }
    }
  }
}

allWsdl.dependsOn(tasks.matching { task -> task.name.startsWith( 'myWsdl' ) } )
compileJava.dependsOn allWsdl
sourceSets.main.java.srcDirs += 'src-gen/main/java/wsdl-xsd'
